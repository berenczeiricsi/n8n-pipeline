{
  "name": "AI-PALS - Content Pipeline",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-1536, -944],
      "id": "bfcf60bf-44d5-41ef-b958-207fcf04c9b8",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {
          "responseFormat": "json_object",
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [-384, -192],
      "id": "d9f6a044-ecda-4fdb-8a6c-2bf8d6052726",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "nvty8aVBxFEbOqKY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// expects: current item is one Bildungseinheit: { name, text }\nconst name = $input.item.json.name || '';\nconst raw = $input.item.json.text || '';\nconst file = $input.item.json.file || '';\n\nconst system = `Du bist ein strenger JSON-Extractor für DaF-Unterricht. \nGib ausschließlich valides JSON zurück, ohne Erklärtext. \nZiel: Aus einer \"Bildungseinheit\" ein Content-Element + optionale Aufgaben erzeugen.\n`;\n\nconst schemaHint = `Return-JSON (ohne Markdown):\n{\n  \"file\": {\n    \"name\": <string>,           \n    \"description\": <string>     \n  },\n  \"contentElements\": [\n    {\n      \"id\": 0,\n      \"name\": <string>,           \n      \"type\": \"CONTENT\",\n      \"order\": <number>,          \n      \"content\": <string>,        \n      \"task\": {\n        \"taskDescription\": <string> | null,\n        \"task\": {\n          \"type\": \"fill-in-the-blank\" | \"true-false\" | \"matching\" | \"sentence-puzzle\",\n          \"sentences\": [ { \"fillSentence\": <string>, \"correctSentence\": <string> } ],\n          \"fillWords\": [<string>]\n        } | null\n      } | null\n    }\n  ]\n}\n\n/* Aufteilungsregeln:\n- Teile den Rohtext in mehrere inhaltlich kohärente Einheiten (z. B. nach Überschriften, Themenblöcken, Unterkapiteln, „Übungen“, „Beispiele“, „Regeln“, „Ausnahmen“).\n- 3–10 Content-Elemente sind ideal; vermeide Ein-Satz-Elemente.\n- \"order\" fortlaufend ab 1.\n- Jede Einheit hat genau EINE Aufgabenart (wenn sinnvoll); 3–6 Items je Aufgabe.\n- Wenn keine sinnvolle Aufgabe: \"task\" = null.\n\nAllgemein:\n- Sprache Deutsch, A2-Niveau, keine Metakommentare.\n- Gib ausschließlich valides JSON zurück (keine Codefences, kein Fließtext).\n- Behalte ausführliche Erklärungen und detaillierte Beispiele für den Theorieteil.\n-Der 'content'-Bereich soll vollständig und lehrreich sein.\n-Füge ausreichend Beispiele und Erklärungen hinzu, um das Thema vollständig zu erklären.\n-Kürze nur echte Wiederholungen, aber bewahre wichtige Details und Beispiele.\n- Mini-Diktat optional sehr kurz (falls passend).\n\nZusatzregeln für Lückentexte:\n- Lücken im fillSentence NUR als {{INSERT}}.\n- Im correctSentence die Lösungen strikt mit {{...}} markieren.\n- fillWords exakt in derselben Reihenfolge wie im correctSentence.\n- Anzahl {{INSERT}} == Anzahl {{...}} == Länge von fillWords.\n`;\n\nconst user = `Titel: ${name}\nRohtext:\n\"\"\"${raw}\"\"\"\n\nBitte extrahiere MEHRERE Content-Elemente nach Schema (contentElements[]) und gib zusätzlich \"course.name\" und \"course.description\" zurück.\nKürze Redundanzen, behalte Kernerklärungen und Beispiele.\nWähle pro Content-Element maximal EINE Aufgabenart und konvertiere 3–6 Items.`;\n\nreturn {\n  json: {\n    system,\n    user,\n    schemaHint,\n    file\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-560, -400],
      "id": "456612e4-ba2f-40f8-976f-d6bb673c95b3",
      "name": "Function - Build Prompts"
    },
    {
      "parameters": {
        "authentication": "gitPassword",
        "operation": "clone",
        "repositoryPath": "={{ $json.repo.path }}",
        "sourceRepository": "={{ $json.repo.url }}"
      },
      "type": "n8n-nodes-base.git",
      "typeVersion": 1,
      "position": [-1168, -944],
      "id": "95dffab8-2ded-4b77-9364-c349b4b9f214",
      "name": "Git - Clone",
      "credentials": {
        "gitPassword": {
          "id": "mB1vJ1WX5L2lwVSY",
          "name": "Git account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "08b70f22-c5db-4808-a0e7-5512ce12f6f8",
              "name": "name",
              "value": "={{ (function(){ const fn = $('Sort - By FileName - Git').item.json.fileName; const noExt = fn.replace(/\\.pdf$/i,''); const noLeadingNumDot = noExt.replace(/^\\d+\\.\\s*/, ''); return noLeadingNumDot.replaceAll('_',' ').trim(); })() }}",
              "type": "string"
            },
            {
              "id": "c4ea1209-bc2b-462d-8a45-c8a2b108eaf6",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "af7ecbf2-8a07-47c8-a6e3-73f9da52c5dd",
              "name": "file.input",
              "value": "={{ $('Sort - By FileName - Git').item.json.fileName }}",
              "type": "string"
            },
            {
              "id": "6464fe78-7094-47e3-a472-1f427909e8a0",
              "name": "file.output",
              "value": "={{ (function(){ const fn = $('Sort - By FileName - Git').item.json.fileName; return fn.replace(/\\.[^.]+$/,'') + '.json'; })() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-816, -592],
      "id": "05013011-3dae-44c7-a12b-f067c6fc5459",
      "name": "Get Only Text - Git"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "fileName"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [-1168, -592],
      "id": "013280dd-c5eb-4776-9778-a2801371a1c4",
      "name": "Sort - By FileName - Git"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "22977cff-1743-4357-9651-94691b0e37ac",
              "name": "repo.url",
              "value": "https://github.com/berenczeiricsi/n8n-pipeline.git",
              "type": "string"
            },
            {
              "id": "ccbeb819-5ae2-436c-908c-cac6eaa30e24",
              "name": "repo.path",
              "value": "/tmp/n8n-pipeline-test",
              "type": "string"
            },
            {
              "id": "98c9b5d9-77be-4622-b33f-9c37a671ce05",
              "name": "content.read_folder",
              "value": "Input",
              "type": "string"
            },
            {
              "id": "cdadfa2d-96a7-4742-a0b8-16c340c626d6",
              "name": "content.store_folder",
              "value": "Output",
              "type": "string"
            },
            {
              "id": "51c57aa9-eb35-4b26-9a0d-84fe6b98d215",
              "name": "course.id",
              "value": "ipcenter:Deutsch A2",
              "type": "string"
            },
            {
              "id": "d6368e5c-8bce-4063-9f6f-b4cb0306dc2b",
              "name": "course.name",
              "value": "A2",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-1344, -944],
      "id": "d4ddb963-d620-4dfa-9e27-616f9139b04f",
      "name": "Globals"
    },
    {
      "parameters": {
        "fileSelector": "={{ $('Globals').item.json.repo.path }}/{{ $('Globals').item.json.content.read_folder }}/**/*.pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [-448, -928],
      "id": "17e85f82-774c-48c8-b38f-1b1c12b52f92",
      "name": "Read - Input Folder",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {
          "keepSource": "json"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [-240, -928],
      "id": "fa952c2e-1330-45aa-8b7b-1ee7851e2c8f",
      "name": "Extract from File - PDF"
    },
    {
      "parameters": {
        "operation": "add",
        "repositoryPath": "={{ $('Globals').item.json.repo.path }}",
        "pathsToAdd": "={{ $json.fileName }}"
      },
      "type": "n8n-nodes-base.git",
      "typeVersion": 1,
      "position": [-448, 16],
      "id": "d0925c2b-ea4b-4b84-baf3-357bf0ff49ae",
      "name": "Git - Add New File",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "commit",
        "repositoryPath": "={{ $('Globals').item.json.repo.path }}",
        "message": "=Added New Content: {{ $('Convert Content Element to File').item.binary.data.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.git",
      "typeVersion": 1,
      "position": [-240, 16],
      "id": "a51def70-da9d-42d9-8a95-b86d0a298a8c",
      "name": "Git - Create Commit Message",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "authentication": "gitPassword",
        "operation": "push",
        "repositoryPath": "={{ $('Globals').item.json.repo.path }}",
        "options": {}
      },
      "type": "n8n-nodes-base.git",
      "typeVersion": 1,
      "position": [-1168, -176],
      "id": "8160d82b-5f55-40e8-8b9f-3f0435f79205",
      "name": "Git - Update Remote Repo",
      "executeOnce": true,
      "credentials": {
        "gitPassword": {
          "id": "mB1vJ1WX5L2lwVSY",
          "name": "Git account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pull",
        "repositoryPath": "={{ $json.repo.path }}"
      },
      "type": "n8n-nodes-base.git",
      "typeVersion": 1,
      "position": [-816, -928],
      "id": "f2816e31-9fa6-4800-9d6c-6549c199b63c",
      "name": "Git - Update Local Repo",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "addConfig",
        "repositoryPath": "={{ $('Globals').item.json.repo.path }}",
        "key": "user.name",
        "value": "n8n Workflow",
        "options": {}
      },
      "type": "n8n-nodes-base.git",
      "typeVersion": 1,
      "position": [-976, -1072],
      "id": "301b3bb0-12c2-4696-a812-c0f0569dc924",
      "name": "Git - Add Config Name",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "addConfig",
        "repositoryPath": "={{ $('Globals').item.json.repo.path }}",
        "key": "user.email",
        "value": "n8n@yiprawr.dev",
        "options": {}
      },
      "type": "n8n-nodes-base.git",
      "typeVersion": 1,
      "position": [-624, -1072],
      "id": "0ef72c45-ca78-43b3-8e0a-de5fe13f2744",
      "name": "Git - Add Config E-Mail",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cb4d653-6a8e-48d7-acff-c51b1e0f8020",
              "name": "file",
              "value": "={{ $json.file }}",
              "type": "object"
            },
            {
              "id": "add94562-db55-41eb-bd5f-151465dddf8e",
              "name": "contentElement",
              "value": "={{ $json.contentElements }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-1168, 16],
      "id": "8c13bf13-b6ea-4f25-adee-22e2d27fba9d",
      "name": "Set Fields To Store"
    },
    {
      "parameters": {
        "jsCode": "// Normalize item to updated schema per file\n// Deterministic UUIDv7 generation without external modules (seeded PRNG)\nfunction xmur3(str){ let h = 1779033703 ^ str.length; for (let i=0; i<str.length; i++){ h = Math.imul(h ^ str.charCodeAt(i), 3432918353); h = (h << 13) | (h >>> 19); } return function(){ h = Math.imul(h ^ (h >>> 16), 2246822507); h = Math.imul(h ^ (h >>> 13), 3266489909); return (h ^= h >>> 16) >>> 0; }; }\nfunction sfc32(a,b,c,d){ return function(){ a >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0; let t = (a + b) | 0; t = (t + d) | 0; d = (d + 1) | 0; a = b ^ (b >>> 9); b = (c + (c << 3) | 0) | 0; c = (c << 21 | c >>> 11); c = (c + t) | 0; return (t >>> 0) / 4294967296; }; }\nfunction uuidv7FromString(input){ const seed = xmur3(String(input)); const rand = sfc32(seed(), seed(), seed(), seed()); const b = new Uint8Array(16); for (let i=0; i<16; i++){ b[i] = Math.floor(rand()*256) & 0xff; } // set version 7 and RFC 4122 variant\n b[6] = (b[6] & 0x0f) | 0x70; b[8] = (b[8] & 0x3f) | 0x80; const hex = Array.from(b, x => x.toString(16).padStart(2,'0')).join(''); return hex.slice(0,8)+'-'+hex.slice(8,12)+'-'+hex.slice(12,16)+'-'+hex.slice(16,20)+'-'+hex.slice(20); }\n\nconst COURSE_NAME = $('Globals').first().json.course.name;\nconst PROVIDER = 'ipcenter';\nconst COURSE_ID = uuidv7FromString(`course|${PROVIDER}|${COURSE_NAME}`);\n\nconst file = $json.file || {};\nconst elements = Array.isArray($json.contentElement)\n  ? $json.contentElement\n  : (Array.isArray($json.contentElements) ? $json.contentElements : []);\n\nconst className = file.name || '';\nconst classId = uuidv7FromString(`class|${COURSE_ID}|${className}`);\n\nconst classes = [{\n  id: classId,\n  name: className,\n  description: file.description || '',\n  contentElements: elements.map((ce, idx) => {\n    const ceName = ce.name || `Content ${idx + 1}`;\n    const ceContent = ce.content || '';\n    const providedId = (ce && typeof ce.id === 'string' && ce.id) ? ce.id : null;\n    const ceId = providedId || uuidv7FromString(`content|${classId}|${ceName}|${ceContent.slice(0,128)}`);\n    return {\n      id: ceId,\n      name: ceName,\n      type: ce.type || 'CONTENT',\n      content: ceContent,\n      task: ce.task || null\n    };\n  })\n}];\n\nreturn [{\n  json: {\n    course: {\n      id: COURSE_ID,\n      name: COURSE_NAME,\n      classes\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1072, 16],
      "id": "af0f1274-2fbc-429b-bbe6-f5a286ee2ebf",
      "name": "Normalize To Course Schema"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a0844866-41e7-4362-b65e-c4fa631b7d98",
              "name": "file_meta",
              "value": "={{ $('Function - Build Prompts').item.json.file }}",
              "type": "object"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-80, -400],
      "id": "27b3e79a-8c8e-438e-b7b5-020ad3882bde",
      "name": "Add File Field to LLM Response"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst existing_file_content = {};\nconst existing_file_names = $input.first().json.exist_data.map(file => {\n  existing_file_content[file.fileName] = file.data;\n  return file.fileName;\n})\n//const existing_file_names = [];\n\nfor (const item of $input.last().json.content_data) {\n  if (existing_file_names.includes(item.name)) {\n    item.exists = true;\n    item.contentElements = existing_file_content[item.name];\n    delete item.text;\n    delete item.file;\n  } else {\n    item.exists = false;\n  }\n}\n\nreturn $input.last();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1360, -416],
      "id": "3cac46cd-0a41-4432-b854-cf3bdf165d08",
      "name": "Add Meta Data if File exist and Cleanup"
    },
    {
      "parameters": {
        "fileSelector": "={{ $('Globals').item.json.repo.path }}/{{ $('Globals').item.json.content.store_folder }}/*.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [-976, -736],
      "id": "bf6b4846-127e-4192-81fd-a10d504a6c6c",
      "name": "Read - Already Converted Content",
      "executeOnce": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {
          "keepSource": "json"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [-816, -736],
      "id": "8570a6e5-7907-40a1-a1e9-70f8c3f44975",
      "name": "Extract JSON from Already Converted Content",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c10eab4a-5549-48a4-8d35-9b0b759880f9",
              "name": "fileName",
              "value": "={{ $('Read - Already Converted Content').item.json.fileName.split('.')[1].replaceAll('_', ' ').trim() }}",
              "type": "string"
            },
            {
              "id": "ead25682-cdf5-415a-8338-463041e16b02",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-624, -736],
      "id": "c0f4d957-c343-4709-a257-76bf0022d621",
      "name": "Add File Name to Converted Content",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "exist_data",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [-448, -736],
      "id": "8bca0c36-0f07-4c4d-ad30-b630d41e5c21",
      "name": "Aggregate - All Files into exist_data"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "content_data",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [-448, -592],
      "id": "6f4eea4a-5161-4b5a-a3a4-34242135ac33",
      "name": "Aggregate - All PDF Content to content_data"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-240, -608],
      "id": "06bb9f3c-2a33-4a30-9ea1-d7a14b809d08",
      "name": "Merge - Existing and Course Content together"
    },
    {
      "parameters": {
        "fieldToSplitOut": "content_data",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [-1168, -416],
      "id": "84ef4a0c-1eae-4a0d-ae38-e501bd030c2a",
      "name": "Split Out - content_data to Check all Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "54d1f4c7-25ad-480c-95d8-9f51ac551852",
              "leftValue": "={{ $json.exists }}",
              "rightValue": "=",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-976, -416],
      "id": "4625ac89-0b58-40af-8d9f-e5e626fdd789",
      "name": "If - File Exists is False"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [-1344, -16],
      "id": "910c1659-8cab-4eb6-90da-da053bed783d",
      "name": "Loop Over Each Generated Content for Storing all in a separate File"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json.schemaHint}}\\n\\n{{$json.user}}",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.system }}"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [-384, -400],
      "id": "4a2edb8d-34ab-4e27-a386-5c01c5f47782",
      "name": "LLM - Generate Content Element"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {
          "fileName": "={{ $('Add File Field to LLM Response').item.json.file_meta.output }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [-976, 16],
      "id": "aa5219b4-769a-46f3-84b6-8f50b1fc16db",
      "name": "Convert Content Element to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $('Globals').item.json.repo.path }}/{{ $('Globals').item.json.content.store_folder }}/{{ $binary.data.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [-720, 16],
      "id": "831e07d1-c8d8-45f1-a8db-687d9224249e",
      "name": "Write JSON Files to Disk"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "exists",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [-1360, 224],
      "id": "014c9a45-b3a1-4ea7-b494-431695b8e1b6",
      "name": "Aggregate - All Existing Files"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "llm_gen",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [-1360, 368],
      "id": "b25b388c-9f49-41d3-8a90-44c1e3305d2a",
      "name": "Aggregate - All the Generated Content"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-1136, 352],
      "id": "871f1473-37d9-4223-8970-87315ab275a2",
      "name": "Merge - Existing and Generated Content Together"
    },
    {
      "parameters": {
        "jsCode": "// Helper to coerce to array\nconst asArray = (v) => Array.isArray(v) ? v : [];\n\n// Safely read from first/last input items\nconst first = $input.first();\nconst last  = $input.last();\n\nconst exists = asArray(first?.json?.exists);\nconst llmGen = asArray(last?.json?.llm_gen);\n\nconst contentElements = [];\n\n// from 'exists': take the first content element if present\nfor (const it of exists) {\n  const ce = it?.contentElements?.[0];\n  if (ce) contentElements.push(ce);\n}\n\n// from 'llm_gen': push items directly if present\nfor (const it of llmGen) {\n  if (it) contentElements.push(it);\n}\n\n// IMPORTANT: Code node must return an array of items\nreturn [\n  {\n    json: { contentElements }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-928, 352],
      "id": "60f44cd6-5fa9-44b9-b331-4b75c7fc2f84",
      "name": "Get All - Content Elements into one List"
    },
    {
      "parameters": {
        "jsCode": "// Function node: normalize to updated schema and assign stable UUIDv7 IDs\n// {\n//   \"course\": {\n//     \"id\": \"<uuidv7>\",\n//     \"name\": \"A2\",\n//     \"classes\": [\n//       {\n//         \"id\": \"<uuidv7>\",\n//         \"name\": \"...\",\n//         \"description\": \"...\",\n//         \"contentElements\": [ { \"id\": \"<uuidv7>\", \"name\": \"...\", \"type\": \"CONTENT\", ... } ]\n//       }\n//     ]\n//   }\n// }\n\nfunction xmur3(str){ let h = 1779033703 ^ str.length; for (let i=0; i<str.length; i++){ h = Math.imul(h ^ str.charCodeAt(i), 3432918353); h = (h << 13) | (h >>> 19); } return function(){ h = Math.imul(h ^ (h >>> 16), 2246822507); h = Math.imul(h ^ (h >>> 13), 3266489909); return (h ^= h >>> 16) >>> 0; }; }\nfunction sfc32(a,b,c,d){ return function(){ a >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0; let t = (a + b) | 0; t = (t + d) | 0; d = (d + 1) | 0; a = b ^ (b >>> 9); b = (c + (c << 3) | 0) | 0; c = (c << 21 | c >>> 11); c = (c + t) | 0; return (t >>> 0) / 4294967296; }; }\nfunction uuidv7FromString(input){ const seed = xmur3(String(input)); const rand = sfc32(seed(), seed(), seed(), seed()); const b = new Uint8Array(16); for (let i=0; i<16; i++){ b[i] = Math.floor(rand()*256) & 0xff; } // set version 7 and RFC 4122 variant\n b[6] = (b[6] & 0x0f) | 0x70; b[8] = (b[8] & 0x3f) | 0x80; const hex = Array.from(b, x => x.toString(16).padStart(2,'0')).join(''); return hex.slice(0,8)+'-'+hex.slice(8,12)+'-'+hex.slice(12,16)+'-'+hex.slice(16,20)+'-'+hex.slice(20); }\n\n// ---- Config you can change ----\nconst COURSE_NAME = $('Globals').first().json.course.name;\nconst PROVIDER = 'ipcenter';\nconst COURSE_ID = uuidv7FromString(`course|${PROVIDER}|${COURSE_NAME}`);\n// -------------------------------\n\nconst top = $input.first().json;\n\nfunction wrapAsClass(contentEl, idx, className, classDesc) {\n  const effectiveName = className || contentEl.name || `Class ${idx + 1}`;\n  const classId = uuidv7FromString(`class|${COURSE_ID}|${effectiveName}`);\n\n  const innerName = contentEl.name || `Content ${idx + 1}`;\n  const innerContent = contentEl.content || '';\n  const providedId = (contentEl && typeof contentEl.id === 'string' && contentEl.id) ? contentEl.id : null;\n  const innerId = providedId || uuidv7FromString(`content|${classId}|${innerName}|${innerContent.slice(0,128)}`);\n\n  const inner = {\n    id: innerId,\n    name: innerName,\n    type: contentEl.type || 'CONTENT',\n    content: innerContent,\n    task: contentEl.task || null\n  };\n\n  return {\n    id: classId,\n    name: effectiveName,\n    description: classDesc || '',\n    contentElements: [inner]\n  };\n}\n\nlet classes = [];\n\nif (top.contentElements && Array.isArray(top.contentElements)) {\n  // Shape A: items may be plain content elements or { contentElement, file? }\n  classes = top.contentElements.map((it, idx) => {\n    const ce = it.contentElement || it || {};\n    const fmeta = it.file || it.file_meta || {};\n    return wrapAsClass(\n      ce,\n      idx,\n      fmeta.name || ce.name,\n      fmeta.description || ''\n    );\n  });\n\n} else if (top.course && Array.isArray(top.course.classes)) {\n  // Shape B: current result where classes are plain content elements\n  const rootDesc = top.course.description || '';\n  classes = top.course.classes.map((ce, idx) =>\n    wrapAsClass(ce, idx, ce.name, rootDesc)\n  );\n\n} else {\n  throw new Error('Unsupported input shape. Expected `contentElements[]` or `course.classes[]`.');\n}\n\nreturn [{\n  json: {\n    course: {\n      id: COURSE_ID,\n      name: COURSE_NAME,\n      classes\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-720, 352],
      "id": "8eef6204-b464-4faa-a1ed-67b9b6fa939e",
      "name": "Transform all the Content Elements into the Output format"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [-752, -352],
      "id": "3fcd8ad9-141f-4381-a640-1211a5046367",
      "name": "Limit"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "LLM - Generate Content Element",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Function - Build Prompts": {
      "main": [
        [
          {
            "node": "LLM - Generate Content Element",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Git - Clone": {
      "main": [
        [
          {
            "node": "Git - Add Config Name",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Git - Update Local Repo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Only Text - Git": {
      "main": [
        [
          {
            "node": "Aggregate - All PDF Content to content_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort - By FileName - Git": {
      "main": [
        [
          {
            "node": "Get Only Text - Git",
            "type": "main",
            "index": 0
          },
          {
            "node": "Read - Already Converted Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals": {
      "main": [
        [
          {
            "node": "Git - Clone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read - Input Folder": {
      "main": [
        [
          {
            "node": "Extract from File - PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File - PDF": {
      "main": [
        [
          {
            "node": "Sort - By FileName - Git",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Git - Add New File": {
      "main": [
        [
          {
            "node": "Git - Create Commit Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Git - Create Commit Message": {
      "main": [
        [
          {
            "node": "Loop Over Each Generated Content for Storing all in a separate File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Git - Update Local Repo": {
      "main": [
        [
          {
            "node": "Git - Add Config Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Git - Add Config Name": {
      "main": [
        [
          {
            "node": "Git - Add Config E-Mail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Git - Add Config E-Mail": {
      "main": [
        [
          {
            "node": "Read - Input Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Fields To Store": {
      "main": [
        [
          {
            "node": "Normalize To Course Schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize To Course Schema": {
      "main": [
        [
          {
            "node": "Convert Content Element to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add File Field to LLM Response": {
      "main": [
        [
          {
            "node": "Aggregate - All the Generated Content",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Each Generated Content for Storing all in a separate File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Meta Data if File exist and Cleanup": {
      "main": [
        [
          {
            "node": "Split Out - content_data to Check all Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read - Already Converted Content": {
      "main": [
        [
          {
            "node": "Extract JSON from Already Converted Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract JSON from Already Converted Content": {
      "main": [
        [
          {
            "node": "Add File Name to Converted Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add File Name to Converted Content": {
      "main": [
        [
          {
            "node": "Aggregate - All Files into exist_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate - All Files into exist_data": {
      "main": [
        [
          {
            "node": "Merge - Existing and Course Content together",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate - All PDF Content to content_data": {
      "main": [
        [
          {
            "node": "Merge - Existing and Course Content together",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge - Existing and Course Content together": {
      "main": [
        [
          {
            "node": "Add Meta Data if File exist and Cleanup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out - content_data to Check all Items": {
      "main": [
        [
          {
            "node": "If - File Exists is False",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If - File Exists is False": {
      "main": [
        [
          {
            "node": "Function - Build Prompts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate - All Existing Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Each Generated Content for Storing all in a separate File": {
      "main": [
        [
          {
            "node": "Git - Update Remote Repo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Fields To Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM - Generate Content Element": {
      "main": [
        [
          {
            "node": "Add File Field to LLM Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Content Element to File": {
      "main": [
        [
          {
            "node": "Write JSON Files to Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write JSON Files to Disk": {
      "main": [
        [
          {
            "node": "Git - Add New File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate - All Existing Files": {
      "main": [
        [
          {
            "node": "Merge - Existing and Generated Content Together",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate - All the Generated Content": {
      "main": [
        [
          {
            "node": "Merge - Existing and Generated Content Together",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge - Existing and Generated Content Together": {
      "main": [
        [
          {
            "node": "Get All - Content Elements into one List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All - Content Elements into one List": {
      "main": [
        [
          {
            "node": "Transform all the Content Elements into the Output format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Function - Build Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d1fcb8b0-d4d1-47f7-bbe0-dfb1853dd301",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f067483c2bc50cc5aea8b8bb21c351d8a8da024c269babd87cc31d150d1aedce"
  },
  "id": "IjABLrkPDGJ5J0Rz",
  "tags": []
}
